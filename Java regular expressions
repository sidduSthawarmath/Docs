
  	/*
		 * String Literals : Complete String match
		 */

		System.out.println("String Literals....");
		System.out.println(Pattern.matches("abc", "abc")); // true (matches whole string)
		System.out.println(Pattern.matches("abc", "abcd")); // false (not matches whole string)

		/*
		 * Character classes : A character class matches a single character in the input
		 * text against multiple allowed characters in the character class case
		 * insensitive
		 */

		System.out.println("character classes.....");
		// [abc]: It would match with text if the text is having either one of them(a,b
		// or c) and only once.
		System.out.println(Pattern.matches("[pqr]", "p")); // true (p exist)
		System.out.println(Pattern.matches("[pqr]+", "pq")); // false (it checks only one character)

		/* [^abc]: Any single character except a, b, or c (^ denote negation) */
		System.out.println(Pattern.matches("[^pqr]", "t")); // true (t not exist)
		System.out.println(Pattern.matches("[^pqr]", "r")); // false (r exist

		/* [a-zA-Z]: a through z, or A through Z, inclusive (range) */
		System.out.println(Pattern.matches("[a-zA-Z]", "Z")); // true (Z exist in pattern)
		System.out.println(Pattern.matches("[a-zA-Z]", "z")); // true (z exist in pattern)
		System.out.println(Pattern.matches("[a-zA-Z]", "0")); // false (0 exist in pattern)

		/* [a-d[m-p]]: a through d, or m through p: [a-dm-p] (union) */
		System.out.println(Pattern.matches("[a-dm-p]", "m")); // true (m is between the given pattern)
		System.out.println(Pattern.matches("[a-dm-p]", "a")); // true (a is between the given pattern)
		System.out.println(Pattern.matches("[a-dm-p]", "e")); // false (e is between the given pattern)

		/* [a-z&&[def]]: Any one of them (d, e, or f) */
		System.out.println(Pattern.matches("[a-z&&[def]]", "d")); // true (d one of the char in 'def')
		System.out.println(Pattern.matches("[a-z&&[def]]", "m")); // false (m is one of the char in 'def')

		/* [a-z&&[^bc]]: a through z, except for b and c: [ad-z] (subtraction) */
		System.out.println(Pattern.matches("[a-z&&[^def]]", "m")); // true (m is not one of the char in 'def')
		System.out.println(Pattern.matches("[a-z&&[^def]]", "d")); // false (d is one of the char in 'def')

		/* [a-z&&[^m-p]]: a through z, and not m through p: [a-lq-z] (subtraction) */
		System.out.println(Pattern.matches("[a-z&&[^m-p]]", "o")); // false (o is comes between '^m-p')
		System.out.println(Pattern.matches("[a-z&&[^m-p]]", "x"));// true (x is not comes between '^m-p')

		/* Predefined Character Classes – Meta characters */
		/* \d -> A digit: [0-9] */
		System.out.println(Pattern.matches("[\\d]", "9")); // true (9 is digit)
		System.out.println(Pattern.matches("[\\d]", "a")); // false (a is not digit)

		/* \D -> A non-digit: [^0-9] */
		System.out.println(Pattern.matches("[\\D]", "$")); // true ($ is not digit)
		System.out.println(Pattern.matches("[\\D]", "1")); // false (1 is digit)

		/* \s -> A whitespace character */
		System.out.println(Pattern.matches("[\\s]", " ")); // true (" " is a white space)
		System.out.println(Pattern.matches("[\\s]", "a"));// false ("a" is not white space)

		/* \S -> A non-whitespace character: [^\s] */
		System.out.println(Pattern.matches("[\\S]", "a")); // true ("a" is non white space char)
		System.out.println(Pattern.matches("[\\S]", " ")); // false (" " is white space char)

		/* \w -> A word character: [a-zA-Z_0-9] */
		System.out.println(Pattern.matches("[\\w]", "a"));// true (its is word char)
		System.out.println(Pattern.matches("[\\w]", "1"));// true (it is word char)
		System.out.println(Pattern.matches("[\\w]", "#"));// false (it is not word char)

		/* \W -> A non-word character: [^\w] */
		System.out.println(Pattern.matches("[\\W]", "#")); // true (it is non word char)
		System.out.println(Pattern.matches("[\\W]", "a"));// false (its is word char)

		/* . -> Any character (may or may not match line terminators) */
		System.out.println(Pattern.matches(".p", "ap"));// true (one char exist before p)
		System.out.println(Pattern.matches("p.", "pt"));// true (one char exist after p)
		System.out.println(Pattern.matches(".p.", "apt"));// true (one char exist before and after p)
		System.out.println(Pattern.matches(".p", "aap"));// false (two chars exist before the p)

		
		/* ^ – matches the beginning of a line */
		System.out.println(Pattern.matches("^java", "java"));//true (stars with 'java')
	
		/* $ – matches the end of a line */
		System.out.println(Pattern.matches("java$", "java"));//true (end with 'java')
		
		
		/* Regex Quantifier */
		System.out.println("? quantifier ....");
		System.out.println(Pattern.matches("[amn]?", "a"));// true (a or m or n comes one time)
		System.out.println(Pattern.matches("[amn]?", "aaa"));// false (a comes more than one time)
		System.out.println(Pattern.matches("[amn]?", "aammmnn"));// false (a m and n comes more than one time)
		System.out.println(Pattern.matches("[amn]?", "aazzta"));// false (a comes more than one time)
		System.out.println(Pattern.matches("[amn]?", "am"));// false (a or m or n must come one time)

		System.out.println("+ quantifier ....");
		System.out.println(Pattern.matches("[amn]+", "a"));// true (a or m or n once or more times)
		System.out.println(Pattern.matches("[amn]+", "aaa"));// true (a comes more than one time)
		System.out.println(Pattern.matches("[amn]+", "aammmnn"));// true (a or m or n comes more than once)
		System.out.println(Pattern.matches("[amn]+", "aazzta"));// false (z and t are not matching pattern)

		System.out.println("* quantifier ....");
		System.out.println(Pattern.matches("[amn]*", "ammmna"));// true (a or m or n may come zero or more times)

		System.out.println(Pattern.matches("[a-zA-Z0-9]{6}", "arun32"));// true
		System.out.println(Pattern.matches("[a-zA-Z0-9]{6}", "kkvarun32"));// false (more than 6 char)
		System.out.println(Pattern.matches("[a-zA-Z0-9]{6}", "JA2Uk2"));// true
		System.out.println(Pattern.matches("[a-zA-Z0-9]{6}", "arun$2"));// false ($ is not matched)

		System.out.println("by character classes and quantifiers ...");
		System.out.println(Pattern.matches("[789]{1}[0-9]{9}", "9953038949"));// true
		System.out.println(Pattern.matches("[789][0-9]{9}", "9953038949"));// true

		System.out.println(Pattern.matches("[789][0-9]{9}", "99530389490"));// false (11 characters)
		System.out.println(Pattern.matches("[789][0-9]{9}", "6953038949"));// false (starts from 6)
		System.out.println(Pattern.matches("[789][0-9]{9}", "8853038949"));// true

		System.out.println("by metacharacters ...");
		System.out.println(Pattern.matches("[789]{1}\\d{9}", "8853038949"));// true
		System.out.println(Pattern.matches("[789]{1}\\d{9}", "3853038949"));// false (starts from 3)
